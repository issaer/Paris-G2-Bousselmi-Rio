import pandas as pd
import numpy as np
import pandas_datareader.data as pdr
import yfinance as yf
yf.pdr_override()
from datetime import datetime

#The aim of this program is to conduct analysis regarding Thales share price and return

#Import Thales Data
hopa = pdr.get_data_yahoo('HO.PA',
                          start=datetime(2018, 12, 30),  
                          end=datetime(2022, 12, 30))    
print(hopa)


#First step, inspect the data
hopa.info()
hopa.tail()
hopa.describe()
ts = hopa['Close'][-10:]
ts


#We are going to create a sample to have a random idea of our data, let's take 10 rows
# Sample 10 rows
sample = hopa.sample(15)

# Print the sample
print(sample)

# Resample to monthly level, to have a monthly idea
monthly_hopa = hopa.resample('M').mean()

# Print monthly_hopa
print(monthly_hopa)


# An interesting and useful exercise is to deduct closing price from opening price:
# Add a column difference to hopa
hopa['diff'] = hopa.Open - hopa.Close

print(sample)

#To plot the closing prices for Thales
# Import Matplotlib's `pyplot` module as `plt`
import matplotlib.pyplot as plt

# Plot the closing prices for `hopa`
hopa['Close'].plot(grid=True)

# Show the plot (now we have an idea of our data)
plt.show()

# To inspect the quality of our data
# Assign `Adj Close` to `daily_close`
daily_close = hopa[['Adj Close']]

# Daily returns
daily_pct_change = daily_close.pct_change()

# Replace NA values with 0
daily_pct_change.fillna(0, inplace=True)

# Inspect daily returns
print(daily_pct_change)

# Daily log returns
daily_log_returns = np.log(daily_close.pct_change()+1)

# Print daily log returns
print(daily_log_returns)

#Now, sample in business months and in quarters to have anotheer point of view

sample = hopa.sample(20)

# Print `sample`
print(sample)

# Resample to monthly level
monthly_hopa = hopa.resample('M').mean()

# Print `monthly_hopa`
print(monthly_hopa)

# To resample your data (Exercise 9)
monthly = hopa.resample('BM').apply(lambda x: x[-1])

# Calculate the monthly percentage change
monthly.pct_change()

# Resample `hopa` to quarters, take the mean as value per quarter
quarter = hopa.resample("4M").mean()

# Calculate the quarterly percentage change
quarter.pct_change()


#Calculate the daily log return (other method)
# Assign `Adj Close` to `daily_close`
daily_close = hopa[['Adj Close']]
# Daily returns
daily_pct_change = daily_close / daily_close.shift(1) - 1

# Print `daily_pct_change`
print(daily_pct_change)

daily_log_returns_shift = np.log(daily_close / daily_close.shift(1))
print(daily_log_returns_shift)

#Let's draw a summary of statistics and cumulative returns
# Import matplotlib
import matplotlib.pyplot as plt

# Plot the distribution of `daily_pct_c`
daily_pct_change.hist(bins=50)


# Pull up summary statistics
print(daily_pct_change.describe())

# Calculate the cumulative daily returns and print it
cum_daily_return = (1 + daily_pct_change).cumprod()

print(cum_daily_return)

# Data Viz
# Import matplotlib
import matplotlib.pyplot as plt

# Plot the cumulative daily returns
cum_daily_return.plot(figsize=(12,8))

# Show the plot
plt.show()

#Let's introduce another CAC40 company in order to compare both
#We chose Air Liquide but it could be another CAC40 companies
#You can also compare with several companies at one time using this program 
def get(tickers, startdate, enddate):
    def data(ticker):
        return pdr.get_data_yahoo(ticker, start=startdate, end=enddate)
    datas = map (data, tickers)
    return(pd.concat(datas, keys=tickers, names=['Ticker', 'Date']))
 
tickers = ['HO.PA', 'AI.PA',]
all_data = get(tickers, datetime(2018, 12, 30), datetime(2022, 12, 30))

# Frequency Distributions on closing prices only

import matplotlib.pyplot as plt
# Isolate the `Adj Close` values and transform the DataFrame
daily_close_px = all_data[['Adj Close']].reset_index().pivot('Date', 'Ticker', 'Adj Close')
 
# Calculate the daily percentage change for `daily_close_px`
daily_pct_change = daily_close_px.pct_change()
 
# Plot the distributions
daily_pct_change.hist(bins=50, sharex=False, figsize=(12,8))

# Show the plot ( We get 2 histograms that we can compare)
plt.show()

# Moving average on closing prices ( only for Thales)
import pandas_datareader.data as pdr
import yfinance as yf
yf.pdr_override()
from datetime import datetime
hopa = pdr.get_data_yahoo('HO.PA',
                          start=datetime(2018, 12, 30),
                          end=datetime(2022, 12, 30))
print(hopa)
 
 
# Isolate the adjusted closing prices
adj_close_px = hopa[['Adj Close']]
 
# Calculate the moving average for Thales
moving_avg = adj_close_px.rolling(window=40).mean()
 
# Inspect the result
print(moving_avg[-10:])


#Volatility calculation to evaluate the riskyness 
# Import matplotlib
import matplotlib.pyplot as plt
 
# Define the minumum of periods to consider
min_periods = 90
 
# Calculate the volatility
vol = daily_pct_change.rolling(min_periods).std() * np.sqrt(min_periods)
 
# Plot the volatility
vol.plot(figsize=(10, 8))
 
# Show the plot
plt.show()

# OLS regression
# Import the `api` model of `statsmodels` under alias `sm`
#! pip install datetools
import statsmodels.api as sm
 
# Import the `datetools` module from `pandas`
# from pandas.core import datetools
# Isolate the adjusted closing price
all_adj_close = all_data[['Adj Close']]
 
# Calculate the returns
all_returns = np.log(all_adj_close / all_adj_close.shift(1))
 
# Isolate Thales returns
hopa_returns = all_returns.iloc[all_returns.index.get_level_values('Ticker') == 'HO.PA']
# to drop index "Ticker"
hopa_returns.index = hopa_returns.index.droplevel('Ticker')
 
# Isolate Air Liquid returns
aipa_returns = all_returns.iloc[all_returns.index.get_level_values('Ticker') == 'AI.PA']
aipa_returns.index = aipa_returns.index.droplevel('Ticker')
 
# Build up a new DataFrame with Thales and Air Liquid returns
return_data = pd.concat([hopa_returns, aipa_returns], axis=1)[1:]
 
#Let's give a name to these columns
return_data.columns = ['HO.PA', 'AI.PA']       
 
# Add a constant
A = sm.add_constant(return_data['HO.PA'])
 
# Construct the model
model = sm.OLS(return_data['AI.PA'],A).fit()
 
# Print the summary
print(model.summary())

# Plotting our OLS Regression
# Import matplotlib
import matplotlib.pyplot as plt
 
# Plot returns of Thales and Air Liquid
plt.plot(return_data['HO.PA'], return_data['AI.PA'], 'g.')
# 'g.' = as we want green points
 
# Add an axis to the plot
ax = plt.axis()
 
# Initialize `x`
x = np.linspace(ax[0], ax[1] + 0.01)
# x will help me to plot OLS regression // here x varies between min and max+0.01
 
# Plot the regression line
plt.plot(x, model.params[0] + model.params[1] * x, 'r', lw=2)
# my OLS regression line : y = 0.0006 + 0.3791 * x
# 'r' : as we want a red regression line  // lw=2 : line width
 
# Customize our plot
plt.grid(True)
plt.axis('tight')
plt.xlabel('Thales Returns')
plt.ylabel('Air Liquide returns')
 
# Show the plot
plt.show()
